# Global exclude patterns - applies to all hooks
exclude: |
  (?x)^(
    dgm/|            # DGM submodule
    openevolve/|     # OpenEvolve submodule
    SEAL (Self-Adapting Language Models)/|           # SEAL (Self-Adapting Language Models) submodule
    .*\.git/.*|      # Git internals
    .*venv/.*|       # Virtual environments
    .*__pycache__/.* # Python cache
  )$

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key

  # Python formatting
  - repo: https://github.com/psf/black
    rev: 24.4.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100, --skip-string-normalization]
        exclude: |
          (?x)^(
            dgm/|
            openevolve/|
            SEAL (Self-Adapting Language Models)/|
            .*venv/|
            .*__pycache__/
          )$

  # Python imports sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]
        exclude: |
          (?x)^(
            dgm/|
            openevolve/|
            SEAL (Self-Adapting Language Models)/|
            .*venv/|
            .*__pycache__/
          )$

  # Security - Python vulnerability scanner using safety (removed due to policy file issues)
  # Note: Safety checks can be run manually with: safety check --short-report
  # - repo: local
  #   hooks:
  #     - id: safety
  #       name: safety
  #       description: 'Check Python dependencies for known security vulnerabilities'
  #       entry: safety check --short-report
  #       language: python
  #       language_version: python3
  #       pass_filenames: false
  #       types: [python]
  #       require_serial: true
  #       additional_dependencies: [safety]

  # Security - Python code analysis
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.8
    hooks:
      - id: bandit
        args: [--recursive, --skip, 'B101,B601,B603,B605,B607,B108,B105,B404']
        exclude: |
          (?x)^(
            dgm/|
            openevolve/|
            SEAL (Self-Adapting Language Models)/|
            .*venv/|
            .*__pycache__/|
            tests/
          )$

  # Run tests with pytest using our custom script
  - repo: local
    hooks:
      - id: pytest-check
        name: Run unit tests (fast)
        entry: ./scripts/evoseal test
        language: script
        types: [python]
        pass_filenames: false
        always_run: true
        verbose: true
        additional_dependencies: []
        exclude: |
          (?x)^(
            dgm/|
            openevolve/|
            SEAL (Self-Adapting Language Models)/|
            .*venv/|
            .*__pycache__/|
            scripts/run_tests.sh
          )$

  # Detect secrets in code
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0  # Using the installed version
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline', '--exclude-files', 'checkpoints/.*\.json$']
        exclude: |
          (?x)^(
            dgm/|
            openevolve/|
            SEAL (Self-Adapting Language Models)/|
            .*venv/|
            .*__pycache__/|
            .*node_modules/|
            .*\\.min\\.js$|
            .*\\.svg$|
            .*\\.jpg$|
            .*\\.png$|
            .*\\.gif$
          )$
        stages: [pre-commit, pre-push]

  # Dockerfile linter
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: hadolint
        description: 'Dockerfile linter'
        entry: hadolint --ignore DL3006 --ignore DL3008 --ignore DL3013
        language: docker_image
        types: [dockerfile]

  # TruffleHog - Find secrets in git history
  - repo: https://github.com/trufflesecurity/trufflehog
    rev: v3.66.0  # Using the latest stable release
    hooks:
      - id: trufflehog
        name: trufflehog
        description: 'Find secrets in git history'
        entry: trufflehog git file://. --since-commit HEAD --no-update --entropy=False --no-verification
        language: system
        pass_filenames: false
        stages: [pre-push]
        always_run: true
