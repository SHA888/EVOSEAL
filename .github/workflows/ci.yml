name: CI/CD Pipeline

on:
  push:
    branches: [main, 'release/*']
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Match semantic version tags
  pull_request:
    branches: [main, 'release/*']
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

# Set default permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  checks: write
  statuses: write
  security-events: write
  packages: write

# Control concurrency to prevent multiple runs for the same ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false  # Changed to false to prevent canceling in-progress runs

# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.8.0'

jobs:
  # First job: Validate code and configuration
  validate:
    name: Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Validate configuration files
      run: |
        # Validate pyproject.toml
        python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
        echo "✅ pyproject.toml is valid"

        # Check for version consistency if this is a tag push
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [[ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]]; then
            echo "::error::Version mismatch! pyproject.toml ($PYPROJECT_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Version consistency check passed"
        fi

  # Simplified test matrix: Ubuntu + Python 3.10 (matches Dockerfile)
  test:
    name: Test (ubuntu-latest, Python 3.10)
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install pytest-cov pytest-xdist

    - name: Run tests (unit + integration)
      id: tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        TEST_ENV: github-actions
      run: |
        pytest -n auto --dist=loadfile -v \
               --cov=evoseal --cov-report=xml --cov-report=term-missing \
               tests/

    - name: Upload coverage to Codecov
      if: success() || failure()
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  # End-to-end tests with mock services
  e2e:
    name: End-to-End (Mock Services)
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Build and start mock services
      run: |
        docker compose version
        docker compose up -d --build dgm-mock openevolve-mock

    - name: Wait for mocks to be healthy
      run: |
        for i in {1..30}; do
          if curl -sSf -X POST http://localhost:8080/dgm/jobs/advance -H 'Content-Type: application/json' -d '{}' >/dev/null; then
            echo "DGM mock is up"; break; fi; echo "Waiting for DGM mock... ($i)"; sleep 2; done
        for i in {1..30}; do
          if curl -sSf -X POST http://localhost:8081/openevolve/jobs/evolve -H 'Content-Type: application/json' -d '{"prompt":"ok"}' >/dev/null; then
            echo "OpenEvolve mock is up"; break; fi; echo "Waiting for OpenEvolve mock... ($i)"; sleep 2; done

    - name: Run E2E tests
      run: |
        pytest -v -m e2e tests/e2e

    - name: Docker logs (on failure)
      if: failure()
      run: |
        docker compose logs --no-color || true

    - name: Teardown
      if: always()
      run: |
        docker compose down -v



  # Documentation build (MkDocs)
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/docs.txt

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: site/
        retention-days: 5

  # Pre-release checks (runs on main and release/* branches)


  lint:
    name: Lint and Type Check
    needs: [validate, test]  # Run after validate and test
    runs-on: ubuntu-latest

    # Only run linting on main and release branches or pull requests
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Check code formatting with Black
      run: black --check --line-length=100 --skip-string-normalization .

    - name: Run Flake8 for style guide enforcement (core files only)
      run: flake8 evoseal/ --exclude=tests,examples,scripts
      continue-on-error: true

    - name: Run MyPy for static type checking (core files only)
      run: mypy --install-types --non-interactive evoseal/ --ignore-missing-imports
      continue-on-error: true

    - name: Run Ruff for additional linting (auto-fix enabled)
      run: ruff check . --fix
      continue-on-error: true

  security:
    name: Security Checks
    needs: [validate, test]  # Run after validate and test
    continue-on-error: true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run Bandit security linter
      uses: PyCQA/bandit@main
      with:
        args: -r evoseal/ -n 1 --skip B101,B104

    - name: Run Safety check
      run: |
        safety check --full-report

  build:
    name: Build Package
    needs: [test, lint, security]  # Run after all other jobs
    runs-on: ubuntu-latest

    # Only build on main and release branches or tags
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build
        ls -la dist/

  # Container image build and security scan (GHCR)
  container:
    name: Build and Scan Container
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build (PR) - load to local Docker
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: evoseal:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push (main/tags)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Compute image ref
        id: imgref
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            REF="evoseal:pr-${{ github.event.pull_request.number }}"
          else
            REF="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          fi
          echo "Using image ref: $REF"
          echo "ref=$REF" >> "$GITHUB_OUTPUT"

      - name: Smoke test image (imports only)
        shell: bash
        run: |
          set -euo pipefail
          echo "Testing image: ${{ steps.imgref.outputs.ref }}"
          docker run --rm "${{ steps.imgref.outputs.ref }}" python -c "import sys; import evoseal; import evoseal.services; import evoseal.services.monitoring_dashboard as md; print('Python OK:', sys.version); print('Imports OK')"

      - name: Run Trivy vulnerability scan (image)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{ steps.imgref.outputs.ref }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
