name: CI/CD Pipeline

on:
  push:
    branches: [main, 'release/*']
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Match semantic version tags
  pull_request:
    branches: [main, 'release/*']
  workflow_dispatch:  # Allow manual triggering
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scans

# Set default permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  checks: write
  statuses: write
  security-events: write

# Control concurrency to prevent multiple runs for the same ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false  # Changed to false to prevent canceling in-progress runs

# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.8.0'

jobs:
  # First job: Validate code and configuration
  validate:
    name: Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Validate configuration files
      run: |
        # Validate pyproject.toml
        python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
        echo "✅ pyproject.toml is valid"

        # Check for version consistency if this is a tag push
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [[ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]]; then
            echo "::error::Version mismatch! pyproject.toml ($PYPROJECT_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Version consistency check passed"
        fi

  # Comprehensive testing matrix
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }}, ${{ matrix.test-type }})
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        test-type: [unit, integration]
        include:
          # Run all tests on Ubuntu with Python 3.10
          - os: ubuntu-latest
            python-version: '3.10'
            test-type: all
            coverage: true
          # Run unit tests on all OS/Python combinations
          - test-type: unit
            coverage: false
          # Run integration tests only on Ubuntu
          - os: ubuntu-latest
            test-type: integration
            coverage: false
        exclude:
          # Don't run integration tests on Windows/macOS (they're more resource-intensive)
          - os: windows-latest
            test-type: integration
          - os: macos-latest
            test-type: integration

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

        # Install test dependencies
        if [ "${{ matrix.coverage }}" = "true" ]; then
          pip install pytest-cov codecov pytest-xdist
        else
          pip install pytest pytest-xdist
        fi

    - name: Run tests
      id: tests
      run: |
        # Set up test command based on test type
        TEST_CMD="pytest -n auto --dist=loadfile -v"

        # Add coverage if enabled
        if [ "${{ matrix.coverage }}" = "true" ]; then
          TEST_CMD="$TEST_CMD --cov=evoseal --cov-report=xml --cov-report=term-missing"
        fi

        # Add test paths based on test type
        if [ "${{ matrix.test-type }}" = "unit" ]; then
          TEST_CMD="$TEST_CMD tests/unit/"
        elif [ "${{ matrix.test-type }}" = "integration" ]; then
          TEST_CMD="$TEST_CMD tests/integration/"
        else  # all tests
          TEST_CMD="$TEST_CMD tests/"
        fi

        echo "Running: $TEST_CMD"
        eval $TEST_CMD
      env:
        PYTHONPATH: ${{ github.workspace }}
        # Add any additional test environment variables here
        TEST_ENV: github-actions

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          test-results/**/*.xml
          .coverage*
        retention-days: 7

    - name: Upload coverage to Codecov
      if: matrix.coverage == 'true' && (success() || failure())
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

    - name: Check test results
      if: always() && steps.tests.outcome != 'success'
      run: |
        echo "Tests failed - please check the test logs"
        exit 1

  # End-to-end tests with mock services
  e2e:
    name: End-to-End (Mock Services)
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Build and start mock services
      run: |
        docker compose version
        docker compose up -d --build dgm-mock openevolve-mock

    - name: Wait for mocks to be healthy
      run: |
        for i in {1..30}; do
          if curl -sSf -X POST http://localhost:8080/dgm/jobs/advance -H 'Content-Type: application/json' -d '{}' >/dev/null; then
            echo "DGM mock is up"; break; fi; echo "Waiting for DGM mock... ($i)"; sleep 2; done
        for i in {1..30}; do
          if curl -sSf -X POST http://localhost:8081/openevolve/jobs/evolve -H 'Content-Type: application/json' -d '{"prompt":"ok"}' >/dev/null; then
            echo "OpenEvolve mock is up"; break; fi; echo "Waiting for OpenEvolve mock... ($i)"; sleep 2; done

    - name: Run E2E tests
      run: |
        pytest -v -m e2e tests/e2e

    - name: Docker logs (on failure)
      if: failure()
      run: |
        docker compose logs --no-color || true

    - name: Teardown
      if: always()
      run: |
        docker compose down -v



  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install documentation dependencies
      run: |
        pip install -e ".[docs]"
        pip install sphinx sphinx-rtd-theme

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/
        retention-days: 5

  # Pre-release checks (runs on main and release/* branches)
  pre-release:
    name: Pre-release Checks
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    needs: [test, security, docs]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Run pre-release checks
      run: |
        # Check for TODO/FIXME comments
        ! grep -r "TODO\|FIXME" evoseal/ --include="*.py"

        # Check for print statements
        ! grep -r "^\s*print\s*(" evoseal/ --include="*.py"

        # Check for debug code
        ! grep -r "import\s+pdb\|pdb.set_trace()" evoseal/ --include="*.py"

    - name: Check CHANGELOG.md
      run: |
        # Check if CHANGELOG.md has been updated
        if [ "$(git diff --name-only HEAD^ HEAD | grep CHANGELOG.md)" == "" ]; then
          echo "::warning::CHANGELOG.md has not been updated"
        fi

    - name: Create Release PR (if not on main)
      if: github.ref != 'refs/heads/main' && github.event_name == 'push'
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: prepare release"
        title: "Release $(date +%Y-%m-%d)"
        body: |
          This is an automated release PR.

          Changes since last release:
          ```
          $ git log --oneline $(git describe --tags --abbrev=0)..HEAD
          ```
        branch: "release/$(date +%Y-%m-%d)"
        base: main
        delete-branch: true

    - name: Run unit tests
      run: |
        pytest -v -m "not integration and not slow" --cov=evoseal --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Run integration tests
      if: matrix.python-version == '3.10'  # Only run integration tests once
      run: |
        pytest -v -m integration --cov=evoseal --cov-append --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Run slow tests
      if: matrix.python-version == '3.10'  # Only run slow tests once
      run: |
        pytest -v -m "slow and not integration" --cov=evoseal --cov-append --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    needs: [validate, test]  # Run after validate and test
    runs-on: ubuntu-latest

    # Only run linting on main and release branches or pull requests
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Check code formatting with Black
      run: black --check .

    - name: Run Flake8 for style guide enforcement (core files only)
      run: flake8 evoseal/ --exclude=tests,examples,scripts
      continue-on-error: true

    - name: Run MyPy for static type checking (core files only)
      run: mypy --install-types --non-interactive evoseal/ --ignore-missing-imports
      continue-on-error: true

    - name: Run Ruff for additional linting (auto-fix enabled)
      run: ruff check . --fix
      continue-on-error: true

  security:
    name: Security Checks
    needs: [validate, test]  # Run after validate and test
    continue-on-error: true
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Run Bandit security linter
      uses: PyCQA/bandit@main
      with:
        args: -r evoseal/ -n 1 --skip B101,B104

    - name: Run Safety check
      run: |
        safety check --full-report

  build:
    name: Build Package
    needs: [test, lint, security]  # Run after all other jobs
    runs-on: ubuntu-latest

    # Only build on main and release branches or tags
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build
        ls -la dist/
