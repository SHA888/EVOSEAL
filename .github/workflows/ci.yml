name: CI

on:
  push:
    branches: [main, 'release/*']
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Match semantic version tags
  pull_request:
    branches: [main, 'release/*']
  workflow_dispatch:  # Allow manual triggering

# Set default permissions for the workflow
permissions:
  contents: read
  pull-requests: read
  checks: write
  statuses: write

# Control concurrency to prevent multiple runs for the same ref
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'recursive'  # This will initialize and update submodules

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Validate pyproject.toml
      run: |
        python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"
        echo "✅ pyproject.toml is valid"

    - name: Check for version consistency
      id: check_version
      run: |
        # Get version from pyproject.toml
        PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")

        # Check if this is a tag push
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/v* ]]; then
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [[ "$PYPROJECT_VERSION" != "$TAG_VERSION" ]]; then
            echo "::error::Version mismatch! pyproject.toml ($PYPROJECT_VERSION) does not match tag ($TAG_VERSION)"
            exit 1
          fi
        fi

        echo "✅ Version consistency check passed"

  test:
    name: Run Tests
    needs: validate
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'  # Initialize and update submodules
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs
        git lfs install

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run unit tests
      run: |
        pytest -v -m "not integration and not slow" --cov=evoseal --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Run integration tests
      if: matrix.python-version == '3.10'  # Only run integration tests once
      run: |
        pytest -v -m integration --cov=evoseal --cov-append --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Run slow tests
      if: matrix.python-version == '3.10'  # Only run slow tests once
      run: |
        pytest -v -m "slow and not integration" --cov=evoseal --cov-append --cov-report=term --cov-report=xml
      env:
        PYTHONPATH: .
        PYTHONUNBUFFERED: 1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    needs: [validate, test]  # Run after validate and test
    runs-on: ubuntu-latest

    # Only run linting on main and release branches or pull requests
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test,dev]"

    - name: Check code formatting with Black
      run: black --check .

    - name: Run Flake8 for style guide enforcement (core files only)
      run: flake8 evoseal/ --exclude=tests,examples,scripts
      continue-on-error: true

    - name: Run MyPy for static type checking (core files only)
      run: mypy --install-types --non-interactive evoseal/ --ignore-missing-imports
      continue-on-error: true

    - name: Run Ruff for additional linting (auto-fix enabled)
      run: ruff check . --fix
      continue-on-error: true

  security:
    name: Security Checks
    needs: [validate, test]  # Run after validate and test
    runs-on: ubuntu-latest

    # Only run security checks on main and release branches or pull requests
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for known security vulnerabilities
      run: |
        # Try new scan command first, fallback to deprecated check if auth fails
        echo "Running security vulnerability scan..."
        safety scan --policy-file .safety-policy.json 2>/dev/null || \
        safety check --ignore 67895 --ignore 65647 --ignore 62556 --ignore 59473 --ignore 65278 --ignore 53048 --ignore 54843 --ignore 42203 --ignore 51499 --ignore 50959 --ignore 74429 --ignore 48542 --ignore 77744 --ignore 77745 --short-report || \
        echo "Security scan completed - some non-critical vulnerabilities found in system packages"
      continue-on-error: true

    - name: Run Bandit for security issues
      run: |
        bandit -r evoseal/ -f json -o bandit-report.json || echo "Bandit scan completed"
        bandit -r evoseal/ || echo "Bandit scan completed with findings"
      continue-on-error: true

  build:
    name: Build Package
    needs: [test, lint, security]  # Run after all other jobs
    runs-on: ubuntu-latest

    # Only build on main and release branches or tags
    if: |
      github.ref == 'refs/heads/main' ||
      startsWith(github.ref, 'refs/heads/release/') ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: |
        python -m build
        ls -la dist/
