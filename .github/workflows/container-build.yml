name: Container Build & Scan (reusable)

on:
  # Reusable workflow or manual trigger only (no automatic push/PR triggers)
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  build:
    name: Build and Scan Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build (PR) - load to local Docker
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: evoseal:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push (main/tags)
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Smoke test image (imports only)
        shell: bash
        run: |
          set -euo pipefail
          IMG_REF="${{ github.event_name == 'pull_request' && format('evoseal:pr-{0}', github.event.pull_request.number) || steps.meta.outputs.tags }}"
          # Use first tag if multiple
          if [[ "$IMG_REF" == *$'\n'* ]]; then IMG_REF="$(echo "$IMG_REF" | head -n1)"; fi
          echo "Testing image: $IMG_REF"
          docker run --rm "$IMG_REF" python -c "import sys; import evoseal; import evoseal.services; import evoseal.services.monitoring_dashboard as md; print('Python OK:', sys.version); print('Imports OK')"

      - name: Set image ref for scanning
        if: github.event_name != 'pull_request'
        id: imgref
        shell: bash
        run: |
          FIRST_TAG="$(echo "${{ steps.meta.outputs.tags }}" | head -n1)"
          echo "Using first tag: $FIRST_TAG"
          echo "first=$FIRST_TAG" >> "$GITHUB_OUTPUT"

      - name: Run Trivy vulnerability scan (image)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.imgref.outputs.first }}
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
