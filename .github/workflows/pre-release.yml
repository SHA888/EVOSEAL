name: Pre-Release (RC)

on:
  workflow_dispatch:  # Manual trigger from GitHub UI/API
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - 'release/*'  # Trigger on PRs to release branches
  push:
    branches:
      - 'release/*'  # Direct pushes to release branches
      - 'main'       # Also trigger on main branch for version bumps

# Set the required permissions for the workflow
permissions:
  contents: write  # for creating releases and tags
  pull-requests: write  # for creating PRs
  issues: write  # for creating issues on failure

concurrency: pre-release-${{ github.ref }}

jobs:
  rc:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine pyyaml tomli

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          mkdir -p releases
          # Generate release notes using your script
          python scripts/generate_evolution_notes.py ${{ steps.version.outputs.version }} --output-dir releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify release notes file exists
        id: verify_release_notes
        run: |
          RELEASE_NOTES_PATH="releases/${{ steps.version.outputs.version }}/RELEASE_NOTES.md"
          if [ ! -f "$RELEASE_NOTES_PATH" ]; then
            echo "Release notes file not found at $RELEASE_NOTES_PATH"
            ls -R releases/
            exit 1
          fi
          echo "RELEASE_NOTES_PATH=$RELEASE_NOTES_PATH" >> $GITHUB_ENV

      - name: Create Release Candidate
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-rc.$(date +%Y%m%d%H%M%S)
          release_name: 'Release Candidate ${{ steps.version.outputs.version }}'
          body_path: releases/${{ steps.version.outputs.version }}/RELEASE_NOTES.md
          draft: true
          prerelease: true

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            releases/${{ steps.version.outputs.version }}/
            dist/*

      - name: Create Pull Request
        if: github.event_name != 'pull_request'  # Skip if already in a PR
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release Candidate: ${{ steps.version.outputs.version }}`,
              head: 'release/v${{ steps.version.outputs.version }}',
              base: 'main',
              body: 'This is an automated release candidate. Please review the changes before proceeding with the release.\n\n**Release Notes Preview:**\n' + 
                '${{ steps.create_release.outputs.upload_url }}',
              draft: false
            });
            console.log(`Created PR #${pr.number}: ${pr.title}`);
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
