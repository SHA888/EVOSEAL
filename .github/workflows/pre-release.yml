name: Pre-Release (RC)

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main, 'release/*']
    types: [completed]
  workflow_dispatch:  # Manual trigger from GitHub UI/API

# Set the required permissions for the workflow
permissions:
  contents: write  # for creating releases and tags
  pull-requests: write  # for creating PRs
  issues: write  # for creating issues on failure
  id-token: write  # for OIDC token

concurrency:
  group: pre-release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pre-release:
    # Only run if the CI workflow was successful
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event.workflow_run.conclusion == 'success' &&
       (github.event.workflow_run.head_branch == 'main' ||
        startsWith(github.event.workflow_run.head_branch, 'release/')))

    # Use the same environment as the CI workflow
    environment: production

    # Required for OIDC token
    permissions:
      contents: write
      id-token: write
      actions: read
      checks: write
      statuses: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine pyyaml tomli

      - name: Get version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes automatically
        run: |
          echo "Generating comprehensive release notes for v${{ steps.version.outputs.version }}..."
          python3 scripts/auto_generate_release_notes.py ${{ steps.version.outputs.version }} --output-dir releases
          echo "Release notes generated successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit generated release notes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add releases/${{ steps.version.outputs.version }}/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: Generate release notes for v${{ steps.version.outputs.version }}"
            git push origin HEAD
            echo "âœ… Release notes committed and pushed"
          fi

      - name: Verify release notes file exists
        id: verify_release_notes
        run: |
          RELEASE_NOTES_PATH="releases/${{ steps.version.outputs.version }}/RELEASE_NOTES.md"
          if [ ! -f "$RELEASE_NOTES_PATH" ]; then
            echo "Release notes file not found at $RELEASE_NOTES_PATH"
            ls -R releases/
            exit 1
          fi
          echo "RELEASE_NOTES_PATH=$RELEASE_NOTES_PATH" >> $GITHUB_ENV

      - name: Create Release Candidate
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          tag_name: v${{ steps.version.outputs.version }}-rc.${{ github.run_number }}
          name: 'Release Candidate ${{ steps.version.outputs.version }}'
          body_path: releases/${{ steps.version.outputs.version }}/RELEASE_NOTES.md
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            releases/${{ steps.version.outputs.version }}/
            dist/*

      - name: Create Release Branch
        if: github.event_name != 'pull_request'  # Skip if already in a PR
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

          # Create and switch to release branch
          RELEASE_BRANCH="release/v${{ steps.version.outputs.version }}"
          git checkout -b "$RELEASE_BRANCH"

          # Push the release branch
          git push -u origin "$RELEASE_BRANCH"
          echo "RELEASE_BRANCH=$RELEASE_BRANCH" >> $GITHUB_ENV

      - name: Create Pull Request
        if: github.event_name != 'pull_request'  # Skip if already in a PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: prepare release v${{ steps.version.outputs.version }}"
          title: "Release Candidate: v${{ steps.version.outputs.version }}"
          body: |
            ## Release Candidate: v${{ steps.version.outputs.version }}

            This is an automated release candidate. Please review the changes before proceeding with the release.

            **Release Notes Preview:**
            ${{ steps.create_release.outputs.upload_url }}

            ### Review Checklist
            - [ ] Verify version numbers are correct
            - [ ] Review release notes for accuracy
            - [ ] Run tests locally
            - [ ] Check for any last-minute changes needed

            ### Next Steps
            - [ ] Approve this PR
            - [ ] Merge when ready
          branch: "${{ env.RELEASE_BRANCH }}"
          base: "main"
          labels: "release,automated-pr"
          delete-branch: true
          draft: false
          team-reviewers: |
            maintainers
            code-owners
