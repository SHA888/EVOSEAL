name: Release

# Only allow one deployment to run at a time
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

on:
  # Trigger when CI workflow completes successfully on main or release/* branches
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [main, 'release/*']
    types: [completed]

  # Manual trigger from GitHub UI/API
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false
        default: 'patch'  # Can be 'major', 'minor', 'patch', or specific version
      publish:
        description: 'Publish to package registry?'
        required: false
        default: 'true'

  # Trigger when version tags are pushed (manual releases)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Only match proper version tags



# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.10'
  POETRY_VERSION: '1.8.0'

jobs:
  release:
    # Only run for successful workflow runs or manual triggers
    if: >
      (github.event_name == 'workflow_dispatch') ||
      (github.event.workflow_run.conclusion == 'success' &&
       (github.event.workflow_run.head_branch == 'main' ||
        startsWith(github.event.workflow_run.head_branch, 'release/')))

    # Use the production environment for protection
    environment: production

    # Required permissions
    permissions:
      contents: write  # For creating releases and tags
      id-token: write  # For OIDC token for package publishing
      actions: read
      checks: write
      statuses: write
      packages: write
      deployments: write
      pull-requests: write  # For updating PRs

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Needed for git history
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: 'recursive'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine pyyaml tomli

      - name: Bump version and update changelog
        id: bump_version
        run: |
          # Install dependencies for the version bump script
          pip install tomli pyyaml

          # Determine the version bump type or specific version
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            if [[ "${{ github.event.inputs.version }}" =~ ^(major|minor|patch)$ ]]; then
              # It's a bump type (major, minor, patch)
              echo "Bumping ${{ github.event.inputs.version }} version..."
              python scripts/bump_version.py ${{ github.event.inputs.version }} --no-push --no-commit
              BUMP_TYPE="${{ github.event.inputs.version }}"
            else
              # It's a specific version
              echo "Setting version to ${{ github.event.inputs.version }}..."
              python scripts/bump_version.py ${{ github.event.inputs.version }} --no-push --no-commit
              BUMP_TYPE="specific"
            fi
          else
            # Default to patch version bump
            echo "Bumping patch version by default..."
            python scripts/bump_version.py patch --no-push --no-commit
            BUMP_TYPE="patch"
          fi

          # Get the new version
          NEW_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "New version: $NEW_VERSION"

          # Set outputs for subsequent steps
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Verify version consistency
        id: verify_version
        run: |
          # Get version from pyproject.toml
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")

          # Get version from the tag or workflow input
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using version from tag: $TAG_VERSION"
            VERSION=$TAG_VERSION
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "Using version from workflow input: ${{ github.event.inputs.version }}"
            VERSION="${{ github.event.inputs.version }}"
          else
            # Default to version from pyproject.toml
            VERSION=$PYPROJECT_VERSION
            echo "Using version from pyproject.toml: $VERSION"
          fi

          # Verify versions match if we have multiple sources
          if [[ "${{ github.event_name }}" == "push" && "$VERSION" != "$PYPROJECT_VERSION" ]]; then
            echo "::error::Version mismatch! pyproject.toml ($PYPROJECT_VERSION) does not match tag ($VERSION)"
            exit 1
          fi

          # Set outputs for subsequent steps
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Verify version format (semver)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+)?$ ]]; then
            echo "::error::Invalid version format: $VERSION. Must follow semantic versioning (e.g., 1.2.3)"
            exit 1
          fi

      - name: Build package
        run: |
          # Clean any existing builds
          rm -rf build/ dist/

          # Build the package
          python -m build

          # Verify the built package
          ls -la dist/

          # Basic validation of the built package
          pip install dist/*.whl --no-deps -v

      - name: Set version for release
        id: set_version
        run: |
          # Use the version from the verify_version step if available
          if [[ -n "${{ steps.verify_version.outputs.version }}" ]]; then
            VERSION="${{ steps.verify_version.outputs.version }}"
          # Handle workflow_dispatch with input
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          # Extract from tag if this is a tag push
          elif [[ "${{ github.event_name }}" == "push" && "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Fallback to pyproject.toml
            VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Verify release artifacts
        id: verify_artifacts
        run: |
          set -e

          # Ensure releases directory exists
          mkdir -p "releases/${{ steps.bump_version.outputs.version }}"

          # Check for release notes or generate them
          RELEASE_NOTES_PATH="releases/${{ steps.bump_version.outputs.version }}/RELEASE_NOTES.md"
          if [ ! -f "$RELEASE_NOTES_PATH" ]; then
            echo "‚ÑπÔ∏è No release notes found at $RELEASE_NOTES_PATH"
            echo "Using CHANGELOG.md as fallback..."
            # Extract the relevant section from CHANGELOG.md
            awk -v version="${{ steps.bump_version.outputs.version }}" '
              $0 ~ "^## [" version "]" {print; found=1; next}
              found && /^## / {exit}
              found {print}
            ' CHANGELOG.md > "$RELEASE_NOTES_PATH" || true

            if [ ! -s "$RELEASE_NOTES_PATH" ]; then
              echo "‚ö†Ô∏è Could not extract release notes from CHANGELOG.md"
              echo "# Release ${{ steps.bump_version.outputs.version }}\n\nNo release notes available." > "$RELEASE_NOTES_PATH"
            fi
          fi

          # Verify the built package files
          if [ ! -f "dist/evoseal-${{ steps.bump_version.outputs.version }}.tar.gz" ]; then
            echo "::error::Source distribution not found"
            exit 1
          fi

          if [ ! -f "dist/evoseal-${{ steps.bump_version.outputs.version }}-py3-none-any.whl" ]; then
            echo "::error::Wheel distribution not found"
            exit 1
          fi

          echo "‚úÖ All release artifacts verified"

      - name: Publish to PyPI
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          set -e
          echo "üì¶ Publishing version ${{ steps.bump_version.outputs.version }} to PyPI..."

          # Verify PyPI token is set
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "::error::PYPI_API_TOKEN secret is not set"
            exit 1
          fi

          # Upload to PyPI
          twine upload --non-interactive \
            --username "$TWINE_USERNAME" \
            --password "$TWINE_PASSWORD" \
            dist/*

          echo "‚úÖ Successfully published to PyPI"

          # Create a git tag and push if this was a workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "üè∑ Creating git tag v${{ steps.bump_version.outputs.version }}..."
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'

            # Commit the version bump and changelog updates
            git add pyproject.toml CHANGELOG.md
            git commit -m "chore: release v${{ steps.bump_version.outputs.version }}" || echo "No changes to commit"

            # Create and push the tag
            git tag -a "v${{ steps.bump_version.outputs.version }}" -m "Release v${{ steps.bump_version.outputs.version }}"
            git push origin "v${{ steps.bump_version.outputs.version }}"

            # Push the commit if there were changes
            git push origin HEAD:${{ github.ref_name }}
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump_version.outputs.version }}
          name: "v${{ steps.bump_version.outputs.version }}"
          body_path: releases/${{ steps.bump_version.outputs.version }}/RELEASE_NOTES.md
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            dist/*
            releases/${{ steps.bump_version.outputs.version }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Distribution
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/*

      - name: Update documentation
        run: |
          # Add steps to update documentation here
          echo "Documentation update steps would go here"

      - name: Notify team
        if: always()
        run: |
          # Add notification steps (e.g., Slack, email)
          echo "Release ${{ github.ref_name }} has been published!"
