name: Release

on:
  # Trigger when pre-release workflow completes successfully
  workflow_run:
    workflows: ["Pre-Release (RC)"]
    branches: [main, 'release/*']
    types: [completed]

  # Manual trigger from GitHub UI/API
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: false

  # Trigger when version tags are pushed (manual releases)
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'  # Only match proper version tags

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    # Always run for workflow_dispatch or tag pushes
    if: |
      github.event_name == 'workflow_dispatch' ||
      (startsWith(github.ref, 'refs/tags/v') &&
       !contains(github.ref, '-'))  # Skip release candidates (vX.Y.Z-rc.N)

    # Use the production environment
    environment: production

    # Required permissions
    permissions:
      contents: write
      id-token: write
      actions: read
      checks: write
      statuses: write
      packages: write
      deployments: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine pyyaml tomli

      - name: Verify version consistency
        id: verify_version
        run: |
          # Get version from pyproject.toml
          PYPROJECT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")

          # Get version from the tag or workflow input
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_VERSION=${GITHUB_REF#refs/tags/v}
            echo "Using version from tag: $TAG_VERSION"
            VERSION=$TAG_VERSION
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "Using version from workflow input: ${{ github.event.inputs.version }}"
            VERSION="${{ github.event.inputs.version }}"
          else
            # Default to version from pyproject.toml
            VERSION=$PYPROJECT_VERSION
            echo "Using version from pyproject.toml: $VERSION"
          fi

          # Verify versions match if we have multiple sources
          if [[ "${{ github.event_name }}" == "push" && "$VERSION" != "$PYPROJECT_VERSION" ]]; then
            echo "::error::Version mismatch! pyproject.toml ($PYPROJECT_VERSION) does not match tag ($VERSION)"
            exit 1
          fi

          # Set outputs for subsequent steps
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Verify version format (semver)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+)?$ ]]; then
            echo "::error::Invalid version format: $VERSION. Must follow semantic versioning (e.g., 1.2.3)"
            exit 1
          fi

      - name: Build package
        run: |
          # Clean any existing builds
          rm -rf build/ dist/

          # Build the package
          python -m build

          # Verify the built package
          ls -la dist/

          # Basic validation of the built package
          pip install dist/*.whl --no-deps -v

      - name: Set version for release
        id: set_version
        run: |
          # Use the version from the verify_version step if available
          if [[ -n "${{ steps.verify_version.outputs.version }}" ]]; then
            VERSION="${{ steps.verify_version.outputs.version }}"
          # Handle workflow_dispatch with input
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          # Extract from tag if this is a tag push
          elif [[ "${{ github.event_name }}" == "push" && "$GITHUB_REF" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Fallback to pyproject.toml
            VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Verify release artifacts
        id: verify_artifacts
        run: |
          set -e

          # Ensure releases directory exists
          mkdir -p "releases/${{ steps.set_version.outputs.version }}"

          # Check for release notes
          RELEASE_NOTES_PATH="releases/${{ steps.set_version.outputs.version }}/RELEASE_NOTES.md"
          if [ ! -f "$RELEASE_NOTES_PATH" ]; then
            echo "⚠️ Release notes not found at $RELEASE_NOTES_PATH"
            echo "Generating release notes as fallback..."
            python3 scripts/auto_generate_release_notes.py \
              ${{ steps.set_version.outputs.version }} \
              --output-dir releases
          else
            echo "✅ Release notes found at $RELEASE_NOTES_PATH"
          fi

          # Verify package files
          if [ ! -f "dist/evoseal-${{ steps.set_version.outputs.version }}.tar.gz" ]; then
            echo "::error::Source distribution not found"
            exit 1
          fi

          if [ ! -f "dist/evoseal-${{ steps.set_version.outputs.version }}-py3-none-any.whl" ]; then
            echo "::error::Wheel distribution not found"
            exit 1
          fi

          echo "✅ All release artifacts verified"

      - name: Publish to PyPI
        if: >
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
        run: |
          set -e
          echo "📦 Publishing version: ${{ steps.set_version.outputs.version }} to PyPI"

          # Verify PyPI token is set
          if [ -z "$TWINE_PASSWORD" ]; then
            echo "::error::PYPI_API_TOKEN secret is not set"
            exit 1
          fi

          # Upload to PyPI
          twine upload --non-interactive \
            --username __token__ \
            --password "$TWINE_PASSWORD" \
            dist/*

          echo "✅ Successfully published to PyPI"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set_version.outputs.version }}
          name: "v${{ steps.set_version.outputs.version }}"
          body_path: releases/${{ steps.set_version.outputs.version }}/RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            dist/*
            releases/${{ steps.set_version.outputs.version }}/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Distribution
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/*

      - name: Update documentation
        run: |
          # Add steps to update documentation here
          echo "Documentation update steps would go here"

      - name: Notify team
        if: always()
        run: |
          # Add notification steps (e.g., Slack, email)
          echo "Release ${{ github.ref_name }} has been published!"
