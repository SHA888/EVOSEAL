name: Release

on:
  workflow_run:
    workflows: ["Pre-Release (RC)"]
    branches: [main, 'release/*']
    types: [completed]
  workflow_dispatch:  # Manual trigger from GitHub UI/API
  push:
    tags:
      - 'v*'  # Trigger when version tags are pushed

concurrency: 
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    # Only run if the pre-release workflow was successful
    if: >
      github.event_name == 'workflow_dispatch' || 
      (github.event.workflow_run.conclusion == 'success' && 
       (github.event.workflow_run.head_branch == 'main' || 
        startsWith(github.event.workflow_run.head_branch, 'release/')))
    
    # Use the production environment
    environment: production
    
    # Required permissions
    permissions:
      contents: write
      id-token: write
      actions: read
      checks: write
      statuses: write
      packages: write
      deployments: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install build twine pyyaml tomli

      - name: Verify version consistency
        run: |
          # Verify version in pyproject.toml matches the tag
          VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version in pyproject.toml ($VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

      - name: Build package
        run: |
          python -m build
          ls -la dist/

      - name: Extract version from tag
        id: extract_version
        run: |
          # Extract version number from ref (e.g., refs/tags/v0.2.21 -> 0.2.21)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Verify release notes exist
        run: |
          RELEASE_NOTES_PATH="releases/${{ steps.extract_version.outputs.version }}/RELEASE_NOTES.md"
          if [ ! -f "$RELEASE_NOTES_PATH" ]; then
            echo "⚠️ Release notes not found at $RELEASE_NOTES_PATH"
            echo "Generating release notes as fallback..."
            python3 scripts/auto_generate_release_notes.py ${{ steps.extract_version.outputs.version }} --output-dir releases
          else
            echo "✅ Release notes found at $RELEASE_NOTES_PATH"
          fi
          echo "Release notes path: $RELEASE_NOTES_PATH"
          ls -la releases/${{ steps.extract_version.outputs.version }}/

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "Publishing version: ${{ steps.extract_version.outputs.version }}"
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: 'Release ${{ steps.extract_version.outputs.version }}'
          body_path: releases/${{ steps.extract_version.outputs.version }}/RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Distribution
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/*

      - name: Update documentation
        run: |
          # Add steps to update documentation here
          echo "Documentation update steps would go here"

      - name: Notify team
        if: always()
        run: |
          # Add notification steps (e.g., Slack, email)
          echo "Release ${{ github.ref_name }} has been published!"
