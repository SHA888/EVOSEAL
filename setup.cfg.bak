[metadata]
description_file = README.md
license_files = LICENSE

[pycodestyle]
max-line-length = 88
exclude = .git,__pycache__,build,dist,.venv,venv
ignore = E203,W503

[pycodestyle:*.py]
max-line-length = 88

[flake8]
max-line-length = 88
exclude = .git,__pycache__,build,dist,.venv,venv
per-file-ignores =
    __init__.py: F401
    tests/*: S101
    */tests/*: S101
ignore =
    E203,  # whitespace before ':' (handled by black)
    W503,  # line break before binary operator (handled by black)
    E501,  # line too long (handled by black)
    B008,  # do not perform function calls in argument defaults
    B009,  # do not call getattr with a constant attribute value, it is not any safer than normal property access.
    B010,  # do not call setattr with a constant attribute value, it is not any safer than normal property access.
    B014,  # do not call assertRaises with a string as the second argument, use a regular expression or the errno attribute of the exception.
    B018,  # useless expression. Either assign it to a variable or remove it.
    B020,  # Loop control variable 'x' not found in function scope
    B022,  # No arguments passed to contextlib.contextmanager
    B023,  # Function definition does not bind loop variable 'x'
    B024,  # BaseException is too broad an exception to catch.
    B025,  # Exception handler with too many exceptions.
    B026,  # Star-arg unpacking after a keyword argument is strongly discouraged.
    B027,  # Empty method 'method' in class 'Class' with no abstract methods
    B028,  # No explicit stacklevel keyword argument found. The warn() method from the warnings module uses a stacklevel of 1 by default.
    B029,  # Using `except` without `Exception` as the first argument may hide real exceptions.
    B030,  # Unnecessary `else` after `return`
    B031,  # Using the `assert` statement for data validation can be disabled with the `-O` flag
    B032,  # Possible unbalanced tuple unpacking with sequence: left side has %%d label(s), right side has %%d value(s)
    B033,  # Use of `assert` detected. The enclosed code will be removed when compiling to optimised bytecode.
    B034,  # Using `assert` detected. The enclosed code will be removed when compiling to optimised bytecode.
    B035,  # Using `assert` detected. The enclosed code will be removed when compiling to optimised bytecode.
    B036,  # Using `assert` detected. The enclosed code will be removed when compiling to optimised bytecode.
    B904,  # Within an except clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish from exceptions in the except clause.
    B905,  # `zip()` without an explicit `strict=` parameter
    B906,  # `zip()` without an explicit `strict=` parameter
    B907,  # `zip()` without an explicit `strict=` parameter
    B950,  # Line too long (found %d characters)
    C4,    # Flake8 Comprehensions
    E203,  # whitespace before ':' (handled by black)
    W503,  # line break before binary operator (handled by black)
    E501,  # line too long (handled by black)
    E722,  # do not use bare 'except'
    F401,  # module imported but unused
    F403,  # 'from module import *' used; unable to detect undefined names
    F405,  # name 'function' may be undefined, or defined from star imports: module
    F541,  # f-string is missing placeholders
    F633,  # use of `>>` is invalid with `print` function
    F811,  # redefinition of unused 'name' from line N
    F821,  # undefined name 'name'
    F841,  # local variable 'name' is assigned to but never used
    F901,  # 'raise NotImplemented' should be 'raise NotImplementedError'
    W292,  # no newline at end of file
    W293,  # blank line contains whitespace
    W504,  # line break after binary operator
    W505,  # doc line too long (82 > 79 characters)
    W605,  # invalid escape sequence '\d'
    W606,  # 'async' and 'await' are reserved keywords starting with Python 3.7
    W607,  # 'yield from' inside async function
    W608,  # 'yield' inside async function

[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = False

[coverage:run]
source = evoseal
omit =
    */tests/*
    */__init__.py
    */version.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    raise ImportError
    if __name__ == .__main__.:
    pass
    raise ImportError
    raise NotImplementedError
    @(abc\.)?abstractmethod
    @(abc\.)?abstractproperty
    @pytest\.mark\.
    @pytest\.fixture
    @pytest\.mark\.parametrize\(
